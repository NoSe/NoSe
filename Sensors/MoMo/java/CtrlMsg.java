/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'CtrlMsg'
 * message type.
 */

public class CtrlMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 14;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 124;

    /** Create a new CtrlMsg of size 14. */
    public CtrlMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new CtrlMsg of the given data_length. */
    public CtrlMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CtrlMsg with the given data_length
     * and base offset.
     */
    public CtrlMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CtrlMsg using the given byte array
     * as backing store.
     */
    public CtrlMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CtrlMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public CtrlMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CtrlMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public CtrlMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CtrlMsg embedded in the given message
     * at the given base offset.
     */
    public CtrlMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CtrlMsg embedded in the given message
     * at the given base offset and length.
     */
    public CtrlMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <CtrlMsg> \n";
      try {
        s += "  [version_=0x"+Long.toHexString(get_version_())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [cmd_type_=0x"+Long.toHexString(get_cmd_type_())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [lpl_duty_=0x"+Long.toHexString(get_lpl_duty_())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [threshold_=0x"+Long.toHexString(get_threshold_())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [sampling_p_=0x"+Long.toHexString(get_sampling_p_())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [collecting_p_=0x"+Long.toHexString(get_collecting_p_())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: version_
    //   Field type: short, unsigned
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'version_' is signed (false).
     */
    public static boolean isSigned_version_() {
        return false;
    }

    /**
     * Return whether the field 'version_' is an array (false).
     */
    public static boolean isArray_version_() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'version_'
     */
    public static int offset_version_() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'version_'
     */
    public static int offsetBits_version_() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'version_'
     */
    public short get_version_() {
        return (short)getUIntBEElement(offsetBits_version_(), 8);
    }

    /**
     * Set the value of the field 'version_'
     */
    public void set_version_(short value) {
        setUIntBEElement(offsetBits_version_(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'version_'
     */
    public static int size_version_() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'version_'
     */
    public static int sizeBits_version_() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: cmd_type_
    //   Field type: short, unsigned
    //   Offset (bits): 8
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'cmd_type_' is signed (false).
     */
    public static boolean isSigned_cmd_type_() {
        return false;
    }

    /**
     * Return whether the field 'cmd_type_' is an array (false).
     */
    public static boolean isArray_cmd_type_() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'cmd_type_'
     */
    public static int offset_cmd_type_() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'cmd_type_'
     */
    public static int offsetBits_cmd_type_() {
        return 8;
    }

    /**
     * Return the value (as a short) of the field 'cmd_type_'
     */
    public short get_cmd_type_() {
        return (short)getUIntBEElement(offsetBits_cmd_type_(), 8);
    }

    /**
     * Set the value of the field 'cmd_type_'
     */
    public void set_cmd_type_(short value) {
        setUIntBEElement(offsetBits_cmd_type_(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'cmd_type_'
     */
    public static int size_cmd_type_() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'cmd_type_'
     */
    public static int sizeBits_cmd_type_() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: lpl_duty_
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'lpl_duty_' is signed (false).
     */
    public static boolean isSigned_lpl_duty_() {
        return false;
    }

    /**
     * Return whether the field 'lpl_duty_' is an array (false).
     */
    public static boolean isArray_lpl_duty_() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'lpl_duty_'
     */
    public static int offset_lpl_duty_() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'lpl_duty_'
     */
    public static int offsetBits_lpl_duty_() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'lpl_duty_'
     */
    public int get_lpl_duty_() {
        return (int)getUIntBEElement(offsetBits_lpl_duty_(), 16);
    }

    /**
     * Set the value of the field 'lpl_duty_'
     */
    public void set_lpl_duty_(int value) {
        setUIntBEElement(offsetBits_lpl_duty_(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'lpl_duty_'
     */
    public static int size_lpl_duty_() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'lpl_duty_'
     */
    public static int sizeBits_lpl_duty_() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: threshold_
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'threshold_' is signed (false).
     */
    public static boolean isSigned_threshold_() {
        return false;
    }

    /**
     * Return whether the field 'threshold_' is an array (false).
     */
    public static boolean isArray_threshold_() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'threshold_'
     */
    public static int offset_threshold_() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'threshold_'
     */
    public static int offsetBits_threshold_() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'threshold_'
     */
    public int get_threshold_() {
        return (int)getUIntBEElement(offsetBits_threshold_(), 16);
    }

    /**
     * Set the value of the field 'threshold_'
     */
    public void set_threshold_(int value) {
        setUIntBEElement(offsetBits_threshold_(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'threshold_'
     */
    public static int size_threshold_() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'threshold_'
     */
    public static int sizeBits_threshold_() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sampling_p_
    //   Field type: long, unsigned
    //   Offset (bits): 48
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sampling_p_' is signed (false).
     */
    public static boolean isSigned_sampling_p_() {
        return false;
    }

    /**
     * Return whether the field 'sampling_p_' is an array (false).
     */
    public static boolean isArray_sampling_p_() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'sampling_p_'
     */
    public static int offset_sampling_p_() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sampling_p_'
     */
    public static int offsetBits_sampling_p_() {
        return 48;
    }

    /**
     * Return the value (as a long) of the field 'sampling_p_'
     */
    public long get_sampling_p_() {
        return (long)getUIntBEElement(offsetBits_sampling_p_(), 32);
    }

    /**
     * Set the value of the field 'sampling_p_'
     */
    public void set_sampling_p_(long value) {
        setUIntBEElement(offsetBits_sampling_p_(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'sampling_p_'
     */
    public static int size_sampling_p_() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'sampling_p_'
     */
    public static int sizeBits_sampling_p_() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: collecting_p_
    //   Field type: long, unsigned
    //   Offset (bits): 80
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'collecting_p_' is signed (false).
     */
    public static boolean isSigned_collecting_p_() {
        return false;
    }

    /**
     * Return whether the field 'collecting_p_' is an array (false).
     */
    public static boolean isArray_collecting_p_() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'collecting_p_'
     */
    public static int offset_collecting_p_() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'collecting_p_'
     */
    public static int offsetBits_collecting_p_() {
        return 80;
    }

    /**
     * Return the value (as a long) of the field 'collecting_p_'
     */
    public long get_collecting_p_() {
        return (long)getUIntBEElement(offsetBits_collecting_p_(), 32);
    }

    /**
     * Set the value of the field 'collecting_p_'
     */
    public void set_collecting_p_(long value) {
        setUIntBEElement(offsetBits_collecting_p_(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'collecting_p_'
     */
    public static int size_collecting_p_() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'collecting_p_'
     */
    public static int sizeBits_collecting_p_() {
        return 32;
    }

}
